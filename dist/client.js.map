{"version":3,"sources":["dist/client/index.js"],"names":["__extends","this","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","define","require","exports","core_1","defineProperty","value","Index","_super","baseUrl","cacheTimeout","responseTimeout","call","SUBFOLDER","parse","stringified","pair","fileIndex","split","forEach","line","indexOf","length","parseInt","stringify","keys","map","fileTarget","Utilities","getKey","join","stringifyHeadlines","headlines","loadHeadlines","request","FILE_EXTENSION","then","response","Error","serverStatus","result","loadFileIndex","headlineKey","catch","error","console","Ajax","main"],"mappings":";;;AAIA,GAAAA,WAAAC,MAAAA,KAAAD,WAAA,WACA,GAAAE,GAAA,SAAAC,EAAAC,GAIA,OAHAF,EAAAG,OAAAC,iBACAC,uBAAAC,QAAA,SAAAL,EAAAC,GAAAD,EAAAI,UAAAH,IACA,SAAAD,EAAAC,GAAA,IAAA,GAAAK,KAAAL,GAAAA,EAAAM,eAAAD,KAAAN,EAAAM,GAAAL,EAAAK,MACAN,EAAAC,GAEA,OAAA,UAAAD,EAAAC,GAEA,QAAAO,KAAAV,KAAAW,YAAAT,EADAD,EAAAC,EAAAC,GAEAD,EAAAU,UAAA,OAAAT,EAAAC,OAAAS,OAAAV,IAAAO,EAAAE,UAAAT,EAAAS,UAAA,GAAAF,OAGAI,QAAA,8BAAA,UAAA,UAAA,gBAAA,SAAAC,EAAAC,EAAAC,GACA,YACAb,QAAAc,eAAAF,EAAA,cAAAG,OAAA,GAMA,IAUAC,GAAA,SAAAC,GAmBA,QAAAD,GAAAE,EAAAC,EAAAC,GACA,MAAAH,GAAAI,KAAAzB,MAAAsB,GAAA,IAAAF,EAAAM,UAAAH,EAAAC,IAAAxB,KAwGA,MA3HAD,WAAAqB,EAAAC,GAgCAD,EAAAO,MAAA,SAAAC,GACA,GACAC,GADAC,IAcA,OAZAF,GACAG,MA/CA,MAgDAC,QAAA,SAAAC,IACA,IAAAA,EAAAC,QAhDA,QAmDAL,EAAAI,EAAAF,MAnDA,MAoDAF,EAAAM,OAAA,IAGAL,EAAAD,EAAA,IAAAO,SAAAP,EAAA,QAEAC,GAQAV,EAAAiB,UAAA,SAAAP,GACA,MAAA1B,QACAkC,KAAAR,GACAS,IAAA,SAAAC,GAAA,MAAAvB,GAAAwB,UAAAC,OAAAF,GApEA,KAoEAV,EAAAU,KACAG,KAtEA,OA8EAvB,EAAAwB,mBAAA,SAAAC,GACA,MAAAA,GAAAF,KA/EA,OAyFAvB,EAAAR,UAAAkC,cAAA,WACA,MAAA9C,MACA+C,QAAA,IAAA3B,EAAA4B,gBACAC,KAAA,SAAAC,GACA,GAAAA,YAAAC,QACAD,EAAAE,cAAA,IACA,KAAA,IAAAD,OAAA,QAAAD,EAAAE,aAEA,OAAAF,GAAAG,OAAAtB,MAjGA,SA0GAX,EAAAR,UAAA0C,cAAA,SAAAC,GACA,MAAAvD,MACA+C,QAAA9B,EAAAwB,UAAAC,OAAAa,GAAAnC,EAAA4B,gBACAC,KAAA,SAAAC,GACA,MAAAA,aAAAC,QACAD,EAAAE,cAAA,OAGAhC,EAAAO,MAAAuB,EAAAG,UAEAG,MAAA,SAAAC,GAEA,MADAC,SAAAD,MAAAA,SAYArC,EAAA4B,eAAA,OAIA5B,EAAAM,UAAA,SACAN,GACAH,EAAA0C,KACA3C,GAAAI,MAAAA,IAGAN,OAAA,wBAAA,8BAAA,SAAA8C,GAAA,MAAAA","file":"client.js","sourcesContent":["/*---------------------------------------------------------------------------*/\n/* Copyright (c) ORDBOK contributors. All rights reserved.                   */\n/* Licensed under the MIT License. See the LICENSE file in the project root. */\n/*---------------------------------------------------------------------------*/\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\ndefine('@ordbok/index-plugin/index',[\"require\", \"exports\", \"@ordbok/core\"], function (require, exports, core_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    /* *\n     *\n     *  Constants\n     *\n     * */\n    var LINE_SEPARATOR = '\\n';\n    var PAIR_SEPARATOR = '\\t';\n    /* *\n     *\n     *  Classes\n     *\n     * */\n    /**\n     * Manages index communication with a server\n     */\n    var Index = /** @class */ (function (_super) {\n        __extends(Index, _super);\n        /* *\n         *\n         *  Constructor\n         *\n         * */\n        /**\n         * Creates a new managed inex instance.\n         *\n         * @param baseUrl\n         *        Base URL of the server\n         *\n         * @param cacheTimeout\n         *        Use 0 milliseconds to turn off all cache systems\n         *\n         * @param responseTimeout\n         *        Time in milliseconds to wait for a server response\n         */\n        function Index(baseUrl, cacheTimeout, responseTimeout) {\n            return _super.call(this, (baseUrl || '') + Index.SUBFOLDER, cacheTimeout, responseTimeout) || this;\n        }\n        /* *\n         *\n         *  Static Functions\n         *\n         * */\n        /**\n         * Converts a text into a file index.\n         *\n         * @param stringified\n         *        Index text\n         */\n        Index.parse = function (stringified) {\n            var fileIndex = {};\n            var pair;\n            stringified\n                .split(LINE_SEPARATOR)\n                .forEach(function (line) {\n                if (line.indexOf(PAIR_SEPARATOR) === -1) {\n                    return;\n                }\n                pair = line.split(PAIR_SEPARATOR);\n                if (pair.length < 2) {\n                    return;\n                }\n                fileIndex[pair[0]] = parseInt(pair[1]);\n            });\n            return fileIndex;\n        };\n        /**\n         * Converts a file index into a text.\n         *\n         * @param fileIndex\n         *        File index\n         */\n        Index.stringify = function (fileIndex) {\n            return Object\n                .keys(fileIndex)\n                .map(function (fileTarget) { return (core_1.Utilities.getKey(fileTarget) + PAIR_SEPARATOR + fileIndex[fileTarget]); })\n                .join(LINE_SEPARATOR);\n        };\n        /**\n         * Converts the headline index into a text.\n         *\n         * @param headlines\n         *        Headlines index\n         */\n        Index.stringifyHeadlines = function (headlines) {\n            return headlines.join(LINE_SEPARATOR);\n        };\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Loads the index of headline keys from the server.\n         */\n        Index.prototype.loadHeadlines = function () {\n            return this\n                .request('_' + Index.FILE_EXTENSION)\n                .then(function (response) {\n                if (response instanceof Error ||\n                    response.serverStatus >= 400) {\n                    throw new Error('HTTP ' + response.serverStatus);\n                }\n                return response.result.split(LINE_SEPARATOR);\n            });\n        };\n        /**\n         * Loads an index file from the server.\n         *\n         * @param headlineKey\n         *        Headline key of the index\n         */\n        Index.prototype.loadFileIndex = function (headlineKey) {\n            return this\n                .request(core_1.Utilities.getKey(headlineKey) + Index.FILE_EXTENSION)\n                .then(function (response) {\n                if (response instanceof Error ||\n                    response.serverStatus >= 400) {\n                    return {};\n                }\n                return Index.parse(response.result);\n            })\n                .catch(function (error) {\n                console.error(error);\n                return {};\n            });\n        };\n        /* *\n         *\n         *  Static Variables\n         *\n         * */\n        /**\n         * File extension of index files\n         */\n        Index.FILE_EXTENSION = '.txt';\n        /**\n         * Subfolder of index files\n         */\n        Index.SUBFOLDER = 'index/';\n        return Index;\n    }(core_1.Ajax));\n    exports.Index = Index;\n});\n//# sourceMappingURL=index.js.map;\ndefine('@ordbok/index-plugin', ['@ordbok/index-plugin/index'], function (main) { return main; });\n\n"]}